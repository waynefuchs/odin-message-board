openapi: 3.0.3
info:
  title: Odin Project Message Board
  description: |-
    This is an API designed for an over-engineered version of the Message Board assignment while working towards completion of _The Odin Project_.
  version: 0.0.1
servers:
  - url: https://localhost:3000/api/v1

tags:
  - name: user
    description: Operations about user

paths:
  /users:
    get:
      tags:
        - user
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        201:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /users/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ""
      operationId: loginUser
      parameters:
        - name: email
          in: query
          description: The email address associated with the user
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
  /users/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ""
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /users/{id}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: "`{id}` must be the id of the logged in user, or the request must be performed by an admin."
      operationId: getUserByName
      parameters:
        - name: id
          in: path
          description: ""
          required: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid username supplied
        "403":
          description: Not authorized
        "404":
          description: User not found

    put:
      tags:
        - user
      summary: Update user
      description: |-
        This can only be done by the logged in user or an admin.

        `id` is required, otherwise only supply the fields that are being updated.

        Changing the email field will reset the `verified` field to false.

        Changing the `admin` field is not valid, unless the current user is an admin.

        Setting the `admin` field to `false` is invalid if there are no other admin accounts.
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: id of the user to be updated
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        default:
          description: successful operation

    delete:
      tags:
        - user
      summary: Delete user
      description: |-
        This can only be done by the logged in user or admin

        Admin can not delete themselves if no other admins exist
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: The id that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: "639f3fdeac3730f6b47ef8b7"
          readOnly: true
        email:
          type: string
          example: username@server.com
        name:
          type: string
          example: "A. Guy"
        verified:
          type: boolean
          example: True
        admin:
          type: boolean
          example: True
        password:
          type: string
          example: "password.123"
          writeOnly: true

  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/User"

  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
